// Code Generated by Sidekick is for learning and experimentation purposes only.
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { NewData } from '../../services/new-data';

@Component({
  standalone: true,
  imports: [CommonModule, FormsModule],
  selector: 'app-women',
  templateUrl: './women.html',
  styleUrls: ['./women.css'] // Note: use 'styleUrls' (array), not 'styleUrl'
})
export class Women implements OnInit {
  products: any[] = [];
  filteredProducts: any[] = [];

  showFilterPanel = false;
  sortOption: string = 'FEATURED';
  labelFilter: string[] = [];
  colorFilter: string[] = [];
  maxPriceFilter: number = 500;
  allColors: string[] = [];

  selectedVariantIndexes: { [productId: number]: number } = {};

  constructor(private NewData: NewData) {}

  ngOnInit() {
    this.NewData.getJsonData().subscribe(data => {
      this.products = data;
      this.setInitialVariants();
      this.setAllColors();
      this.updateFilters();
    });
  }

  setInitialVariants() {
    this.products.forEach(product => {
      this.selectedVariantIndexes[product.id] = 0;
    });
  }

  setAllColors() {
    // Gather distinct colors from all variants in all products
    const colorSet = new Set<string>();
    this.products.forEach(product => {
      if (product.variants) {
        product.variants.forEach((variant: any) => {
          if (variant.color) {
            colorSet.add(variant.color);
          }
        });
      }
    });
    this.allColors = Array.from(colorSet);
  }

  updateFilters() {
    let filtered = this.products.slice();

    // Label filter
    if (this.labelFilter.length > 0) {
      filtered = filtered.filter(product => 
        product.labels?.some((label: string) => this.labelFilter.includes(label))
      );
    }

    // Color filter
    if (this.colorFilter.length > 0) {
      filtered = filtered.filter(product =>
        product.variants?.some((variant: any) =>
          this.colorFilter.includes(variant.color)
        )
      );
    }

    // Price filter
    filtered = filtered.filter(product =>
      product.variants?.some((variant: any) =>
        variant.price <= this.maxPriceFilter
      )
    );

    // Sorting logic
    switch (this.sortOption) {
      case 'PRICE_LOW_HIGH':
        filtered.sort(
          (a, b) => (this.getCheapestVariant(a)?.price ?? 0) - (this.getCheapestVariant(b)?.price ?? 0)
        );
        break;
      case 'PRICE_HIGH_LOW':
        filtered.sort(
          (a, b) => (this.getCheapestVariant(b)?.price ?? 0) - (this.getCheapestVariant(a)?.price ?? 0)
        );
        break;
      case 'ALPHA_AZ':
        filtered.sort((a, b) => (a.product_name || '').localeCompare(b.product_name || ''));
        break;
      case 'ALPHA_ZA':
        filtered.sort((a, b) => (b.product_name || '').localeCompare(a.product_name || ''));
        break;
      // Implement other sort options if needed
    }

    this.filteredProducts = filtered;
  }

  getCheapestVariant(product: any): any {
    return product.variants?.reduce((prev: any, curr: any) => 
      (prev.price <= curr.price ? prev : curr)
    );
  }

  toggleLabelFilter(lbl: string, checked: boolean) {
    if (checked && !this.labelFilter.includes(lbl)) {
      this.labelFilter.push(lbl);
    } else if (!checked) {
      this.labelFilter = this.labelFilter.filter(l => l !== lbl);
    }
    this.updateFilters();
  }

  toggleColorFilter(color: string, checked: boolean) {
    if (checked && !this.colorFilter.includes(color)) {
      this.colorFilter.push(color);
    } else if (!checked) {
      this.colorFilter = this.colorFilter.filter(c => c !== color);
    }
    this.updateFilters();
  }

  removeLabelFilter(lbl: string) {
    this.labelFilter = this.labelFilter.filter(l => l !== lbl);
    this.updateFilters();
  }

  removeColorFilter(color: string) {
    this.colorFilter = this.colorFilter.filter(c => c !== color);
    this.updateFilters();
  }

  resetPriceFilter() {
    this.maxPriceFilter = 500;
    this.updateFilters();
  }

  clearAllFilters() {
    this.labelFilter = [];
    this.colorFilter = [];
    this.maxPriceFilter = 500;
    this.updateFilters();
  }

  onSortChange(value: string) {
    this.sortOption = value;
    this.updateFilters();
  }

  // Variant selection logic for the product grid
  onColorSelect(productId: number, variantIndex: number) {
    this.selectedVariantIndexes[productId] = variantIndex;
  }

  getSelectedVariant(product: any): any {
    const index = this.selectedVariantIndexes[product.id] ?? 0;
    return product.variants ? product.variants[index] : product.variants?.[0];
  }
}
