// Code Generated by Sidekick is for learning and experimentation purposes only.
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterLink } from '@angular/router';

interface CartItem {
  id: string;
  name: string;
  image: string;
  color: string;
  size: string;
  price: number;
  quantity: number;
}

interface RecommendedProduct {
  id: string;
  title: string;
  img: string;
  price: number;
  listPrice: number;
}

@Component({
  selector: 'app-cart',
  templateUrl: './cart.html',
  styleUrls: ['./cart.css'],
  standalone: true,
  imports: [CommonModule, RouterLink]
})
export class CartComponent {   // <<== FIX THIS NAME!
  cartOpen = false;
  recOpen = true;
  cartItems: CartItem[] = [];
  recommendedProducts: RecommendedProduct[] = [
    { id: 'r1', title: 'Anytime No Show Sock', img: './images/Products/A11631_25Q3_Wool-Cruiser-Dark-Camel-Natural-White-Sole_PDP_LEFT__1_bec494cd-90bc-4d1a-b180-cd8a56464781.png', price: 9, listPrice: 14 },
    { id: 'r2', title: 'Low Cut Sock', img: './images/Products/A11893_25Q3_Tree-Glider-Thunder-Green-Stony-Cream-Sole_PDP_LEFT__1.png', price: 9, listPrice: 14 },
    { id: 'r3', title: 'Everyday Sock', img: './images/Products/A11837_25Q3_Wool-Cruiser-NZ-Light-Blue-Natural-White-Sole_PDP_LEFT__1_1.png', price: 9, listPrice: 14 }
  ];

  closeCart(): void { this.cartOpen = false; }
  decreaseQty(id: string): void {
    const item = this.cartItems.find(i => i.id === id);
    if (item && item.quantity > 1) item.quantity--;
  }
  increaseQty(id: string): void {
    const item = this.cartItems.find(i => i.id === id);
    if (item) item.quantity++;
  }
  removeFromCart(id: string): void {
    this.cartItems = this.cartItems.filter(i => i.id !== id);
  }
  addRecommendedToCart(product: RecommendedProduct): void {
    const newItem: CartItem = {
      id: `rec-${product.id}-${Date.now()}`,
      name: product.title,
      image: product.img,
      color: 'Default',
      size: 'S',
      price: product.price,
      quantity: 1
    };
    this.cartItems.push(newItem);
  }
  get subtotal(): number {
    return this.cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);
  }
}
